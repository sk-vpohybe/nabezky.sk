<?php

DEFINE('TRACKFIELD_MAP_PPLD_MAX', 46848);
DEFINE('TRACKFIELD_MAP_ZOOM_MAX', 16);
DEFINE('TRACKFIELD_STATIC_MAP_PATH', 'trackfield_map/static');

global $trackfield_map_type_max_path_len;
$trackfield_map_type_max_path_len = array(
  'static_image' => 512,
  'leaflet' => 512,
  'gmap' => 90,
  'gmap_static' => 45
);

/*
 * Implementation of hook_menu().
 */

function trackfield_map_menu() {
  $items = array();

  /* To plot static map */
  $items[TRACKFIELD_STATIC_MAP_PATH] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    /* TODO: handle arguments */ 
    'file' => 'trackfield_map_static.inc',
    'page callback' => '_trackfield_map_static_do_map');

  /* Admin menu */
  $access = user_access('administer trackfield');
  $items['admin/settings/trackfield/map'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Maps'),
    'description' => t('Settings for trackfield maps.'),
    'access arguments' => array('administer trackfield'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_trackfield_map_admin'),
    'file' => 'trackfield_map_admin.inc',
  );

  return $items;
}


/**
 * Implementation of hook_field_info().
 */
function trackfield_map_field_info() {
  return array(
    'trackmap' => array('label' => 'Track Map'),
  );
}

/**
 * Implementation of hook_field_settings().
 * This is identical to the trackfield_graph hook.
 */
function trackfield_map_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
    /*
     * We don't actually have to store anything in the database for
     * this field.
     * However, if we do that then it cannot be used in views so
     * let's just store a dummy boolean and just ignore it.
     */
      $columns = array(
        'dummy' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 1, 'sortable' => FALSE),
      );
      return $columns;

    case 'form':
      $form = array(
        'reference_field_name' => array(
          '#type' => 'textfield',
          '#rows' => 1,
          '#title' => t('Reference Field Name'),
          '#default_value' => isset($field['reference_field_name']) ? $field['reference_field_name'] : '',
          '#required' => true
        )
      );
      return $form;
    case 'validate':
      if (!in_array($field['reference_field_name'], $valid_fields = _trackfield_fields())) {
        if (array_count_values($valid_fields) == 0) {
          form_set_error('reference_field_name', t('You must specify the reference field of type track, but appear not to have any defined!'));
        } else {
          form_set_error('reference_field_name', t('You must specify the reference field of type track. Valid fields in this system: %fields', array('%fields' => join(', ', $valid_fields))));
        }
      }
      break;
    case 'save':
      return array('reference_field_name');
  }
}

function trackfield_map_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'view':
      $out_items = array();
      $context = $teaser ? 'teaser' : 'full';
      $formatter = isset($field['display_settings'][$context]['format']) ? $field['display_settings'][$context]['format'] : 'default';
      /* TODO: create a map for each delta in the reference array */
      $out_items[$delta]['view'] = content_format($field, $item, $formatter, $node);
      return theme('field', $node, $field, $out_items, $teaser, $page);
      
    case 'update':
      /* Add dummy value into items so they are saved. */
      $items[]['dummy'] = TRUE;
      break;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function trackfield_map_widget_info() {
  return array(
    'trackfield_map_none' => array(
      'label' =>  t('None required'),
      'field types' => array('trackmap'),
    ),
  );
}

function trackfield_map_widget_settings($op, $widget) {
}

function trackfield_map_widget($op, &$node, $field, &$items) {
  switch ($op) {
    case 'form':
      /*
       * If we don't return at least a blank array then this field
       * will not appear in the 'manage fields' tab inside content.
       */
      return array();
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function trackfield_map_content_is_empty($item, $field) {
  return FALSE;
}

function trackfield_map_theme() {
  $themes = array();
  foreach (array_keys(trackfield_map_field_formatter_info()) as $formatter) {
    $themes['trackfield_map_formatter_' . $formatter] = array(
      'arguments' => array('element' => NULL),
      'function' => '_trackfield_map_field_theme',
    );
  }

  /* For admin forms */ 
  $themes['trackfield_map_sizes_form'] = array(
    'arguments' => array('form' => NULL),
    'file' => 'trackfield_map_admin.inc'
  );

  return $themes;
}

function trackfield_map_field_formatter_info() {
  $formatters = array();
  $trackfield_map_format_sizes = variable_get('trackfield_map_format_sizes', array());
  foreach (array_keys($trackfield_map_format_sizes) as $formatter) {
    $formatters[$formatter] = array('label' => $formatter, 'field types' => array('trackmap'));
  }

  return $formatters;
}

function _trackfield_map_optimise_path(&$item, $dlat, $dlon, $dx, $dy, $max) {
  /*
   * Use Anthony Cartmell's implementation of Douglas-Peuker.
   * See: http://www.fonant.com/demos/douglas_peucker/algorithm
   */
  include_once 'PolylineReducer.php';

  $points = array();
  for ($lp = 0; $lp < count($item['latitude']); $lp++) {
    $points[] = new GeoPoint($item['latitude'][$lp], $item['longitude'][$lp]);
  }

  /*
   * Have a guess at tolerance.
   */
  $tolerance = min($dlat, $dlon) / ($max * 4);
  $simple_line = $points;
  while (count($simple_line) > $max) {
    $reducer = new PolylineReducer($points);
    $simple_line = $reducer->SimplerLine($tolerance);
    $tolerance *= 2;
  }

  $out_lat = array();
  $out_lon = array();
  for ($lp = 0; $lp < count($simple_line); $lp++) {
    $out_lat[] = $simple_line[$lp]->latitude;
    $out_lon[] = $simple_line[$lp]->longitude;
  }

  $item['latitude'] = $out_lat;
  $item['longitude'] = $out_lon;
}

function _trackfield_map_field_theme($element) {
	/*
	 * Look in the sizes array for definitions matchin the formatter.
	 */
	
	$formatter = $element['#formatter'];
	$out = '';
	$trackfield_map_format_sizes = variable_get('trackfield_map_format_sizes', array());
	foreach (array_keys($trackfield_map_format_sizes) as $fcheck) {
		if ($fcheck == $formatter) {
			/*
			 * Found the correct size - get lat/lon data and draw map.
			 */
			$map_width = $trackfield_map_format_sizes[$formatter]['width'];
			$map_height = $trackfield_map_format_sizes[$formatter]['height'];
			
			$this_field_name = $element['#field_name'];
			$field = content_fields($this_field_name);
			$ref_field_name = $field['reference_field_name'];
			$node = $element['#node'];
			$delta = 0; /* TODO: multiple deltas */
			if ($node->op == 'Preview') {
				/*
				 * If this is a preview then the datasets should already be in
				 * the node. Just use that.
				 */
				$ref_field = $node->$ref_field_name;
				$item = $ref_field[$delta];
			} else {
				/*
				 * This isn't a preview.
				 * The datasets will not have automatically been loaded (for performance reasons),
				 * so load them now.
				 */
				$result = db_query("SELECT settype, setdata from {trackfield_datasets} WHERE vid = %d and field_name = '%s' and delta = %d and settype in ('latitude', 'longitude')", $node->vid, $ref_field_name, $delta);
				while ($sd = db_fetch_object($result)) {
					$item[$sd->settype] = split(',', $sd->setdata);
				}
			}
			
			/* Should we be showing a map too? */
			if (isset($item) && array_key_exists('latitude', $item) && array_key_exists('longitude', $item)) {
				if ($trackfield_map_format_sizes[$formatter]['type'] == 'static_image' ) {
					/*
					 * Static map is a little different, so just pass in the item and let it handle everything.
					 */
					$out .= sprintf('<img width="%d" height="%d" src="/trackfield_map/static/%d,%d,%s/%s" title="%s" alt="%s">',
						$map_width, $map_height, $node->nid, $node->vid, $ref_field_name, $formatter, $node->node_title, $node->node_title);
				} else {
					/*
					 * The other map drawing methods have some common processing, so included here.
					 */
					
					/* Find bounds of lat/lon for map */
					$bounds = _trackfield_map_find_bounds($item);
					
					/* Figure out zoom */
					$zoom = _trackfield_map_find_zoom($bounds, $map_width, $map_height);
					$map_centre = _trackfield_map_find_centre($bounds);
					
					global $trackfield_map_type_max_path_len;
					$max_path_len = $trackfield_map_type_max_path_len[$trackfield_map_format_sizes[$formatter]['type']];
					$line_points = _trackfield_map_get_points($item, $bounds, $map_width, $map_height, $max_path_len);        
					
					/* TODO: these should be attributes of formatter */
					$path_colour = '0000bb';
					$path_width = 2;
					$path_opacity = 50;
					$path_id = "trackfield_map_$node->nid";
					
					if ($trackfield_map_format_sizes[$formatter]['type'] == 'gmap_static') {
						$path = sprintf('&path=rgb:0x%s,weight:%d|%s',
							$path_colour,
							$path_width,
							join('|', $line_points));
						$static_src = sprintf('http://maps.google.com/staticmap?zoom=%d&center=%s&size=%dx%d%s&key=%s',
							$zoom,
							$map_centre,
							$map_width, $map_height,
							$path,
							variable_get('googlemap_api_key', ''));
						$out .= sprintf('<img src="%s" alt="map" title="map" width="%d" height="%d"/>',
							$static_src,
							$map_width, $map_height);
					} else if ($trackfield_map_format_sizes[$formatter]['type'] == 'gmap' && module_exists('gmap')) {
						/* Markers for start/finish */
						$markers = sprintf(" |markers=route::%s + %s",
							$line_points[0], end($line_points));
						
						/* Default is gmap embedded */
						$path = sprintf(' |line=#%s/%d/%d:%s', $path_colour, $path_width, $path_opacity, join(' + ', $line_points));
						$gmap = sprintf('[gmap zoom=%d |center=%s |width=%dpx |height=%dpx |id=%s %s%s%s]',
							$zoom,
							$map_centre,
							$map_width, $map_height,
							$path_id,
							$trackfield_map_format_sizes[$formatter]['gmap_attr'],
							$path,
							$markers);
						
						_gmap_doheader();
						$out .= gmap_filter('process', 0, 1, $gmap);
					} else if ($trackfield_map_format_sizes[$formatter]['type'] == 'leaflet' ) {
						drupal_add_js('.' . base_path() . 'sites/all/libraries/leaflet/leaflet.js');
						drupal_add_css('sites/all/libraries/leaflet/leaflet.css');
						$out .= sprintf('<div id="map" style="width: %dpx;height: %dpx"></div>', $map_width, $map_height);
						$out .= "<script>" .
							sprintf("var map = L.map('map').setView([%s], %d);", $map_centre, $zoom) .
							sprintf("var %s = L.polyline([[%s]], {color: 'red', opacity: '1', weight: 3}).addTo(map);", $path_id, join('],[', $line_points)) .
							_trackfield_map_leaflet_layers() .
							"</script>";
					}
				}
			}
			break;
		}
	}
	
	return $out;
}

/*
 * Leaflet layers
 */

function _trackfield_map_leaflet_layers($control = 'L.Control.Layers') {
	/*
	 * Add Google Layers using plugin.
	 * 
	 */
	 drupal_add_js('.' . base_path() . 'sites/all/libraries/leaflet-plugins/layer/tile/Google.js');
	 drupal_set_html_head('<script src="http://maps.google.com/maps/api/js?v=3&sensor=false"></script>');

	/*
	 * TODO: make this configurable.
	 */
	return
		   "if (customOverlays === undefined) { customOverlays = {}; }\n" . 
           "L.control.scale({'imperial':false}).addTo(map);" .
           "var ocm = L.tileLayer('//{s}.tile.opencyclemap.org/cycle/{z}/{x}/{y}.png', {attribution: 'Thunderforest \u003Ca target=\u0022attr\u0022 href=\u0022http:\u002F\u002Fthunderforest.com\u0022\u003EOpenCycleMap\u003C\u002Fa\u003E. Map data \u0026copy; \u003Ca target=\u0022attr\u0022 href=\u0022http:\u002F\u002Fopenstreetmap.org\u0022\u003EOpenStreetMap\u003C\u002Fa\u003E and contributors', maxZoom:17});" .
           "var est = L.tileLayer('//server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png', {attribution: 'Tiles \u0026copy; \u003Ca target=\u0022attr\u0022 href=\u0022http:\u002F\u002Fesri.com\u0022\u003EEsri\u003C\u002Fa\u003E', maxZoom:18});" .
           
# Old method of adding Google layers:           
#           "var ggs = L.tileLayer('//khm{s}.googleapis.com/kh?v=125&x={x}&y={y}&z={z}', {attribution: 'Map data \u0026copy; \u003Ca target=\u0022attr\u0022 href=\u0022http:\u002F\u002Fgooglemaps.com\u0022\u003EGoogle\u003C\u002Fa\u003E', subdomains: [ 0, 1, 2, 3 ], maxZoom:18});" .
#           "var ggt = L.tileLayer('//mt{s}.googleapis.com/vt?lyrs=t,r&x={x}&y={y}&z={z}', {attribution: 'ATTR', subdomains: [ 0, 1, 2, 3 ], maxZoom:15});" .
#           "var ggm = L.tileLayer('//mt{s}.googleapis.com/vt?x={x}&y={y}&z={z}', {attribution: 'Map data \u0026copy; \u003Ca target=\u0022attr\u0022 href=\u0022http:\u002F\u002Fgooglemaps.com\u0022\u003EGoogle\u003C\u002Fa\u003E', subdomains: [ 0, 1, 2, 3 ], maxZoom:18});" .
		   "var ggs = new L.Google('SATELLITE');" .
		   "var ggm = new L.Google('ROADMAP');" .
		   "var layerControl = new $control( {'OSM Cycle':ocm, 'Esri Topo':est, 'Google Satellite':ggs, 'Google Road':ggm}, customOverlays);" .
           "map.addControl(layerControl);" .
           /* This controls the default layer */
           "est.addTo(map);";
}

/*
 * Find bounds of lat/lon for map
 */

function _trackfield_map_merge_bounds($bounda, $boundb) {
	if (!isset($bounda) || !is_array($bounda) || count($bounda) != 4) {
		return $boundb;
	} else if (!isset($boundb) || !is_array($boundb) || count($boundb) != 4) {
		return $bounda;
	}
	
	list($lata_min, $lona_min, $lata_max, $lona_max) = $bounda;
	list($latb_min, $lonb_min, $latb_max, $lonb_max) = $boundb;

	return array(min($lata_min, $latb_min), min($lona_min, $lonb_min), max($lata_max, $latb_max), max($lona_max, $lonb_max));
}

function _trackfield_map_find_bounds($item, $degrees_padding = 0) {
	/* Maybe this item already has bounds? */
	if (is_object($item)) {
		if (is_array($item->boundary)) {
			$out = $item->boundary;
		} else {
			$latitude = $item->latitude;
			$longitude = $item->longitude;
		}
	} else if (is_array($item)) {
	if (array_key_exists('boundary', $item)) {
		$out = $item['boundary'];
	} else {
			$latitude = $item['latitude'];
			$longitude = $item['longitude'];
		}
	}
	
	if (!isset($out)) {
		$points = count($latitude);
		
		$lat_min = 90; $lat_max = -90;
		$lon_min = 180; $lon_max = -180;
		for ($lp = 0; $lp < $points; $lp++) {
			if ($latitude[$lp] < $lat_min) { $lat_min = $latitude[$lp]; }
			if ($latitude[$lp] > $lat_max) { $lat_max = $latitude[$lp]; }
			if ($longitude[$lp] < $lon_min) { $lon_min = $longitude[$lp]; }
			if ($longitude[$lp] > $lon_max) { $lon_max = $longitude[$lp]; }
		}
		
		$out = array($lat_min, $lon_min, $lat_max, $lon_max);
	}
	
	/*
	 * Pad if required.
	 */
	 if (isset($out) && $degrees_padding != 0) {
		$dlat = $out[2] - $out[0];
		$dlon = $out[3] - $out[1];
 
		$margin_degrees = max($dlat, $dlon) * $degrees_padding / 2;
		
		$out = array(
			$out[0] - $margin_degrees,
			$out[1] - $margin_degrees,
			$out[2] + $margin_degrees,
			$out[3] + $margin_degrees
		);
	 }
	
	return $out;
}

function _trackfield_map_find_zoom($bounds, $width, $height) {
	list($lat_min, $lon_min, $lat_max, $lon_max) = $bounds;

    $lon_degs = $lon_max - $lon_min;
    $lat_degs = $lat_max - $lat_min;
    $pixelsPerLonDegree = TRACKFIELD_MAP_PPLD_MAX;
    $zoom = TRACKFIELD_MAP_ZOOM_MAX;
    while ($zoom > 1) {
      /* TODO: handle lat properly */
      if ($lon_degs * $pixelsPerLonDegree < $width &&
          $lat_degs * $pixelsPerLonDegree < $height) break;

      $zoom--;
      $pixelsPerLonDegree /= 2;
    }
    return $zoom;
}

function _trackfield_map_find_centre($bounds) {
  list($lat_min, $lon_min, $lat_max, $lon_max) = $bounds;
	
  return sprintf('%f,%f',  $lat_min + ($lat_max - $lat_min) / 2, $lon_min + ($lon_max - $lon_min) / 2);
}

/*
 * Remove rendundant points (if any) and return string array point pairs.
 */

function _trackfield_map_get_points($item, $bounds, $map_width, $map_height, $max_path_len) {
	$points = count($item['latitude']);        
  list($lat_min, $lon_min, $lat_max, $lon_max) = $bounds;
	
	if ($points > $max_path_len) {
		_trackfield_map_optimise_path($item, $lat_max - $lat_min, $lon_max - $lon_min,  $map_width, $map_height, $max_path_len);
	}
	$line_points = array();
	for ($lp = 0; $lp < count($item['latitude']); $lp++) {
		/* 5DP is 1m accuracy at equator */
		$line_points[] = sprintf("%.5f,%.5f", $item['latitude'][$lp], $item['longitude'][$lp]);
	}

	return $line_points;
}        
