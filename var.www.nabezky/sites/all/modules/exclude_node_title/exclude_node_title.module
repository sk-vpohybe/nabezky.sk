<?php
/**
 * @file
 * Exclude Node Title
 *
 * @author Gabriel Ungureanu
 * gabriel.ungreanu@ag-prime.com
 */


/**
 * Implementation of hook_perm().
 */
function exclude_node_title_perm() {
  return array('administer exclude node title',
    'exclude any node title',
    'exclude own node title',
    'use exclude node title');
}

/**
 * Implementation of hook_menu().
 */
function exclude_node_title_menu() {

  $items['admin/settings/exclude_node_title'] = array(
    'title' => t('Exclude Node Title from display'),
    'description' => t('Exclude Node Title from display'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exclude_node_title_admin_settings'),
    'access arguments' => array('administer exclude node title'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'exclude_node_title.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_preprocess_page().
 */
function exclude_node_title_preprocess_page(&$vars, $hook) {
  if (!user_access('use exclude node title')) { // user doesn't have access to module
    return;
  }
  // exclude from path node/<nid>
  $nid = FALSE;
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  elseif (arg(0) == 'search' && variable_get('exclude_node_title_search', 0)) {
    $vars['title'] = '';
    return;
  }
  if ($nid) {
    if (in_array($nid, variable_get('exclude_node_title_nid_list', array()))) {
      // remove title on a per node id basis
      $vars['title'] = '';
    }
    else {
      // remove title on a per node type basis
      if (isset($vars['node']) && is_object($vars['node'])) {
        $node_type = $vars['node']->type;
      }
      elseif ( is_numeric($nid) ) {
        $node = node_load($nid);
        $node_type = $node->type;
        unset($node); // memory cleanup
      }
      $exclude_node_title_content_type = exclude_node_title_content_type();
      if (!empty($exclude_node_title_content_type) && !empty($exclude_node_title_content_type[$node_type])) {
        $vars['title'] = '';
      }
    }
  } 
}

/**
 * Implementation of hook_nodeapi().
 */
function exclude_node_title_nodeapi(&$node, $op) {
  if ( (variable_get('exclude_node_title_remove_title', 0) == 0 && !(arg(0) == 'comment' && arg(1) == 'reply' && is_numeric(arg(2))))
          || !user_access('use exclude node title')) {
    return;
  }
  switch ($op) {
    case 'view':
      if (in_array($node->nid, variable_get('exclude_node_title_nid_list', array()))) {
        $node->title = '';
      }
      else {
        $exclude_node_title_content_type = exclude_node_title_content_type();
        if (!empty($exclude_node_title_content_type[$node->type])) {
          $node->title = '';
        }
      }
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function exclude_node_title_content_extra_fields($type_name) {
  // @todo Check based on $type_name if we should show the field on this Content-type
  $extras['exclude_node_title'] = array(
    'label' => t('Exclude title from display'),
    'description' => t('Exclude Node Title module form.'),
    'weight' => -4,
  );
  return $extras;
}

/**
 * Implementation of hook_form_alter().
 */
function exclude_node_title_form_alter(&$form, &$form_state, $form_id) {
//  if($form_id == 'user_profile_form'){
//
//  }
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    if (!user_access('exclude any node title')) {
      global $user;
      if (!user_access('exclude own node title') ||
              ( user_access('exclude own node title') && strcmp($form['#node']->name, $user->name) ) ) {
        return FALSE;
      }
    }
    $weight = $form['title']['#weight']+0.1;
    $form['exclude_node_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Exclude title from display'),
      '#required' => FALSE,
      '#default_value' => (!empty($form['nid']['#value']) ? in_array($form['nid']['#value'], variable_get('exclude_node_title_nid_list', array())) : FALSE ),
      '#weight' => $weight,
    );
    $exclude_node_title_content_type = exclude_node_title_content_type();
    if (!empty($exclude_node_title_content_type[$form['#node']->type])) {
      $form['exclude_node_title']['#disabled'] = TRUE;
      $form['exclude_node_title']['#description'] = t('Title already hidden by content-type in Exclude Node Title !url page.', array('!url' => l(t('settings'), 'admin/settings/exclude_node_title')));
    }
    $form['#submit'][] = 'exclude_node_title_node_edit_form_submit';
  }
}

/**
 * Implementation of hook_form_submit().
 */
function exclude_node_title_node_edit_form_submit($form, &$form_state) {
  if (isset($form_state['values']['exclude_node_title']) && isset($form_state['values']['nid'])) {
    $exclude_list = variable_get('exclude_node_title_nid_list', array());
    $is_excluded = array_search($form_state['values']['nid'], $exclude_list);
    if ($form_state['values']['exclude_node_title'] == 1 && $is_excluded === FALSE) {
      $exclude_list[] = $form_state['values']['nid'];
      variable_set('exclude_node_title_nid_list', $exclude_list);
      return;
    }
    elseif ($form_state['values']['exclude_node_title'] == 0 && $is_excluded !== FALSE) {
      unset($exclude_list[$is_excluded]);
      variable_set('exclude_node_title_nid_list', $exclude_list);
      return;
    }
  }
}

/*
 * Variable getter, using static caching
 */
function exclude_node_title_content_type($reset = FALSE) {
  static $exclude_node_title_content_type; // perform static caching of variable
  if (!is_array($exclude_node_title_content_type) || $reset) {
    $exclude_node_title_content_type = variable_get('exclude_node_title_content_type_values', array());
  }
  return $exclude_node_title_content_type;
}